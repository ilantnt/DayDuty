"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withDeprecationWarning = exports.getTimeStamp = exports.padZeroes = void 0;

var constants = _interopRequireWildcard(require("./constants"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var padZeroes = function padZeroes(width, n) {
  return ('' + n).padStart(width, '0');
};

exports.padZeroes = padZeroes;

var getTimeStamp = function getTimeStamp() {
  var now = new Date();
  return "[".concat(padZeroes(2, now.getHours()), ":").concat(padZeroes(2, now.getMinutes()), ":") + "".concat(padZeroes(2, now.getSeconds()), ".").concat(padZeroes(3, now.getMilliseconds()), "]");
};

exports.getTimeStamp = getTimeStamp;
var shownWarningLabels = [];

var withDeprecationWarning = function withDeprecationWarning(warningLabel, fn) {
  return function () {
    if (!shownWarningLabels.includes(warningLabel)) {
      var message;

      switch (warningLabel) {
        case constants.DEPRECATED_THIS_LIFECYCLE_PANEL:
          message = 'this.LifecyclePanel is deprecated, please use this.props.LifecyclePanel instead.';
          break;

        case constants.DEPRECATED_THIS_TRACE:
          message = 'this.trace is deprecated, please use this.props.trace instead.';
          break;

        case constants.DEPRECATED_CLEAR_COUNTERS:
          message = 'clearInstanceIdCounters() is deprecated, please use resetInstanceIdCounters() instead.';
          break;

        default:
          message = 'Unspecified warning.';
      } // eslint-disable-next-line no-console


      console.warn("WARNING: react-lifecycle-visualizer: ".concat(message));
      shownWarningLabels.push(warningLabel);
    }

    return fn.apply(void 0, arguments);
  };
};

exports.withDeprecationWarning = withDeprecationWarning;