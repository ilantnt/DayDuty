"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = traceLifecycle;
exports.clearInstanceIdCounters = exports.resetInstanceIdCounters = void 0;

var _react = _interopRequireWildcard(require("react"));

var _hoistNonReactStatics = _interopRequireDefault(require("hoist-non-react-statics"));

var constants = _interopRequireWildcard(require("./constants"));

var ActionCreators = _interopRequireWildcard(require("./redux/actionCreators"));

var _util = require("./util");

var _LifecyclePanel = _interopRequireDefault(require("./components/LifecyclePanel"));

var _VisualizerProvider = require("./redux/VisualizerProvider");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var instanceIdCounters = {};

var resetInstanceIdCounters = function resetInstanceIdCounters() {
  Object.keys(instanceIdCounters).forEach(function (k) {
    return delete instanceIdCounters[k];
  });
};

exports.resetInstanceIdCounters = resetInstanceIdCounters;
var clearInstanceIdCounters = (0, _util.withDeprecationWarning)(constants.DEPRECATED_CLEAR_COUNTERS, resetInstanceIdCounters);
exports.clearInstanceIdCounters = clearInstanceIdCounters;

var mkInstanceId = function mkInstanceId(componentName) {
  if (!Object.prototype.hasOwnProperty.call(instanceIdCounters, componentName)) {
    instanceIdCounters[componentName] = 0;
  }

  instanceIdCounters[componentName] += 1;
  return instanceIdCounters[componentName];
};

function traceLifecycle(ComponentToTrace) {
  var componentToTraceName = ComponentToTrace.displayName || ComponentToTrace.name || 'Component';
  var superMethods = Object.getOwnPropertyNames(ComponentToTrace.prototype).concat(ComponentToTrace.getDerivedStateFromProps ? [constants.MGetDerivedState] : []);
  var isLegacy = // component is legacy if it includes one of the legacy methods and no new methods.
  superMethods.some(function (member) {
    return constants.lifecycleMethodNamesLegacyOnly.includes(member);
  }) && superMethods.every(function (member) {
    return !constants.lifecycleMethodNamesNewOnly.includes(member);
  });
  var implementedMethods = [].concat(_toConsumableArray(superMethods), [constants.MSetState]);

  var TracedComponent = /*#__PURE__*/function (_ComponentToTrace) {
    _inherits(TracedComponent, _ComponentToTrace);

    var _super = _createSuper(TracedComponent);

    function TracedComponent(props, context) {
      var _this;

      _classCallCheck(this, TracedComponent);

      props.trace(constants.MConstructor);
      _this = _super.call(this, props, context);
      _this.LifecyclePanel = (0, _util.withDeprecationWarning)(constants.DEPRECATED_THIS_LIFECYCLE_PANEL, props.LifecyclePanel);
      _this.trace = (0, _util.withDeprecationWarning)(constants.DEPRECATED_THIS_TRACE, props.trace);

      if (!isLegacy && typeof _this.state === 'undefined') {
        _this.state = {}; // Initialize state if it is undefined, otherwise the addition of getDerivedStateFromProps will cause a warning.
      }

      return _this;
    }

    _createClass(TracedComponent, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.props.trace(constants.MWillMount);

        if (_get(_getPrototypeOf(TracedComponent.prototype), "componentWillMount", this)) {
          _get(_getPrototypeOf(TracedComponent.prototype), "componentWillMount", this).call(this);
        }
      }
    }, {
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        // eslint-disable-line camelcase
        this.props.trace(constants.MWillMount); // trace it as 'componentWillMount' for brevity

        if (_get(_getPrototypeOf(TracedComponent.prototype), "UNSAFE_componentWillMount", this)) {
          _get(_getPrototypeOf(TracedComponent.prototype), "UNSAFE_componentWillMount", this).call(this);
        }
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this.props.trace(constants.MDidMount);

        if (_get(_getPrototypeOf(TracedComponent.prototype), "componentDidMount", this)) {
          _get(_getPrototypeOf(TracedComponent.prototype), "componentDidMount", this).call(this);
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.props.trace(constants.MWillUnmount);

        if (_get(_getPrototypeOf(TracedComponent.prototype), "componentWillUnmount", this)) {
          _get(_getPrototypeOf(TracedComponent.prototype), "componentWillUnmount", this).call(this);
        }
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps() {
        this.props.trace(constants.MWillReceiveProps);

        if (_get(_getPrototypeOf(TracedComponent.prototype), "componentWillReceiveProps", this)) {
          var _get2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          (_get2 = _get(_getPrototypeOf(TracedComponent.prototype), "componentWillReceiveProps", this)).call.apply(_get2, [this].concat(args));
        }
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps() {
        // eslint-disable-line camelcase
        this.props.trace(constants.MWillReceiveProps); // trace it as 'componentWillReceiveProps' for brevity

        if (_get(_getPrototypeOf(TracedComponent.prototype), "UNSAFE_componentWillReceiveProps", this)) {
          var _get3;

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          (_get3 = _get(_getPrototypeOf(TracedComponent.prototype), "UNSAFE_componentWillReceiveProps", this)).call.apply(_get3, [this].concat(args));
        }
      }
    }, {
      key: "shouldComponentUpdate",
      value: function shouldComponentUpdate() {
        var _get4;

        this.props.trace(constants.MShouldUpdate);

        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        return _get(_getPrototypeOf(TracedComponent.prototype), "shouldComponentUpdate", this) ? (_get4 = _get(_getPrototypeOf(TracedComponent.prototype), "shouldComponentUpdate", this)).call.apply(_get4, [this].concat(args)) : true;
      }
    }, {
      key: "componentWillUpdate",
      value: function componentWillUpdate() {
        this.props.trace(constants.MWillUpdate);

        if (_get(_getPrototypeOf(TracedComponent.prototype), "componentWillUpdate", this)) {
          var _get5;

          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          (_get5 = _get(_getPrototypeOf(TracedComponent.prototype), "componentWillUpdate", this)).call.apply(_get5, [this].concat(args));
        }
      }
    }, {
      key: "UNSAFE_componentWillUpdate",
      value: function UNSAFE_componentWillUpdate() {
        // eslint-disable-line camelcase
        this.props.trace(constants.MWillUpdate); // trace it as 'componentWillUpdate' for brevity

        if (_get(_getPrototypeOf(TracedComponent.prototype), "UNSAFE_componentWillUpdate", this)) {
          var _get6;

          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }

          (_get6 = _get(_getPrototypeOf(TracedComponent.prototype), "UNSAFE_componentWillUpdate", this)).call.apply(_get6, [this].concat(args));
        }
      }
    }, {
      key: "render",
      value: function render() {
        if (_get(_getPrototypeOf(TracedComponent.prototype), "render", this)) {
          this.props.trace(constants.MRender);
          return _get(_getPrototypeOf(TracedComponent.prototype), "render", this).call(this);
        }

        return undefined; // There's no super.render, which will trigger a React error
      }
    }, {
      key: "getSnapshotBeforeUpdate",
      value: function getSnapshotBeforeUpdate() {
        var _get7;

        this.props.trace(constants.MGetSnapshot);

        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
          args[_key6] = arguments[_key6];
        }

        return _get(_getPrototypeOf(TracedComponent.prototype), "getSnapshotBeforeUpdate", this) ? (_get7 = _get(_getPrototypeOf(TracedComponent.prototype), "getSnapshotBeforeUpdate", this)).call.apply(_get7, [this].concat(args)) : null;
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate() {
        this.props.trace(constants.MDidUpdate);

        if (_get(_getPrototypeOf(TracedComponent.prototype), "componentDidUpdate", this)) {
          var _get8;

          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }

          (_get8 = _get(_getPrototypeOf(TracedComponent.prototype), "componentDidUpdate", this)).call.apply(_get8, [this].concat(args));
        }
      }
    }, {
      key: "setState",
      value: function setState(updater, callback) {
        var _this2 = this;

        this.props.trace(constants.MSetState); // Unlike the lifecycle methods we only trace the update function and callback when they are actually defined.

        var tracingUpdater = typeof updater !== 'function' ? updater : function () {
          _this2.props.trace(constants.MSetState + ':update fn');

          return updater.apply(void 0, arguments);
        };
        var tracingCallback = !callback ? undefined : function () {
          _this2.props.trace(constants.MSetState + ':callback');

          callback.apply(void 0, arguments);
        };

        _get(_getPrototypeOf(TracedComponent.prototype), "setState", this).call(this, tracingUpdater, tracingCallback);
      }
    }], [{
      key: "getDerivedStateFromProps",
      value: function getDerivedStateFromProps(nextProps, prevState) {
        nextProps.trace(constants.MGetDerivedState);
        return ComponentToTrace.getDerivedStateFromProps ? ComponentToTrace.getDerivedStateFromProps(nextProps, prevState) : null;
      }
    }]);

    return TracedComponent;
  }(ComponentToTrace);

  _defineProperty(TracedComponent, "displayName", componentToTraceName);

  var TracingComponent = /*#__PURE__*/function (_Component) {
    _inherits(TracingComponent, _Component);

    var _super2 = _createSuper(TracingComponent);

    function TracingComponent(props, context) {
      var _this3;

      _classCallCheck(this, TracingComponent);

      _this3 = _super2.call(this, props, context);
      var instanceId = mkInstanceId(ComponentToTrace.name);

      var WrappedLifecyclePanel = function WrappedLifecyclePanel() {
        return /*#__PURE__*/_react["default"].createElement(_LifecyclePanel["default"], {
          componentName: componentToTraceName,
          isLegacy: isLegacy,
          instanceId: instanceId,
          implementedMethods: implementedMethods
        });
      };

      _this3.LifecyclePanel = WrappedLifecyclePanel;

      _this3.trace = function (methodName) {
        // Just dispatch on lifecycleVisualizerStore directly, rather than introducing complexity by using context.
        _VisualizerProvider.store.dispatch(ActionCreators.trace(componentToTraceName, instanceId, methodName));
      };

      return _this3;
    }

    _createClass(TracingComponent, [{
      key: "render",
      value: function render() {
        return /*#__PURE__*/_react["default"].createElement(TracedComponent, _extends({
          LifecyclePanel: this.LifecyclePanel,
          trace: this.trace
        }, this.props));
      }
    }]);

    return TracingComponent;
  }(_react.Component); // Removing the inappropriate methods is simpler than adding appropriate methods to prototype.


  _defineProperty(TracingComponent, "displayName", "traceLifecycle(".concat(componentToTraceName, ")"));

  if (isLegacy) {
    delete TracedComponent.getDerivedStateFromProps;
    delete TracedComponent.prototype.getSnapshotBeforeUpdate; // Only keep the tracer method corresponding to the implemented super method, unless neither the old or the
    // UNSAFE_ method is implemented, in which case we keep the UNSAFE_ method.
    // NOTE: This allows both the old method and the UNSAFE_ version to be traced, but this is correct, as React calls
    //       both.

    var deleteOldOrUnsafe = function deleteOldOrUnsafe(method, unsafeMethod) {
      if (!superMethods.includes(method)) {
        delete TracedComponent.prototype[method];
      } else if (!superMethods.includes(unsafeMethod)) {
        delete TracedComponent.prototype[unsafeMethod];
      }
    };

    deleteOldOrUnsafe(constants.MWillMount, constants.MUnsafeWillMount);
    deleteOldOrUnsafe(constants.MWillReceiveProps, constants.MUnsafeWillReceiveProps);
    deleteOldOrUnsafe(constants.MWillUpdate, constants.MUnsafeWillUpdate);
  } else {
    delete TracedComponent.prototype.componentWillMount;
    delete TracedComponent.prototype.componentWillReceiveProps;
    delete TracedComponent.prototype.componentWillUpdate;
    delete TracedComponent.prototype.UNSAFE_componentWillMount;
    delete TracedComponent.prototype.UNSAFE_componentWillReceiveProps;
    delete TracedComponent.prototype.UNSAFE_componentWillUpdate;
  }

  return (0, _hoistNonReactStatics["default"])(TracingComponent, ComponentToTrace);
}