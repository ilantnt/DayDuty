"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setDelay = exports.setReplayTimerDelay = exports.clearLog = exports.trace = exports.stepLog = exports.highlight = exports.startReplay = exports.pauseReplay = void 0;

var constants = _interopRequireWildcard(require("../constants"));

var util = _interopRequireWildcard(require("../util"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* global sessionStorage:false */

/* eslint no-unused-vars: [1, { "args": "none" }] */
// Primitive actions:
var addLogEntry = function addLogEntry(componentName, instanceId, methodName) {
  return {
    type: 'ADD_LOG_ENTRY',
    componentName: componentName,
    instanceId: instanceId,
    methodName: methodName
  };
};

var clearLogEntries = function clearLogEntries() {
  return {
    type: 'CLEAR_LOG_ENTRIES'
  };
};

var setHighlight = function setHighlight(highlightedIndex) {
  return {
    type: 'SET_HIGHLIGHT',
    highlightedIndex: highlightedIndex
  };
};

var setReplayTimerId = function setReplayTimerId(replayTimerId) {
  return {
    type: 'SET_REPLAY_TIMER_ID',
    replayTimerId: replayTimerId
  };
};

var setReplayTimerDelayPrim = function setReplayTimerDelayPrim(replayTimerDelay) {
  return {
    type: 'SET_REPLAY_TIMER_DELAY',
    replayTimerDelay: replayTimerDelay
  };
}; // Thunk actions:


var pauseReplay = function pauseReplay() {
  return function (dispatch, getState) {
    var _getState = getState(),
        replayTimerId = _getState.replayTimerId;

    if (replayTimerId !== null) {
      clearInterval(replayTimerId);
      dispatch(setReplayTimerId(null));
    }
  };
};

exports.pauseReplay = pauseReplay;

var replayStep = function replayStep() {
  return function (dispatch, getState) {
    var _getState2 = getState(),
        highlightedIndex = _getState2.highlightedIndex,
        logEntries = _getState2.logEntries;

    if (highlightedIndex < logEntries.length - 1) {
      dispatch(setHighlight(highlightedIndex + 1));
    } else {
      dispatch(pauseReplay());
    }
  };
};

var startReplay = function startReplay() {
  return function (dispatch, getState) {
    var _getState3 = getState(),
        replayTimerId = _getState3.replayTimerId,
        replayTimerDelay = _getState3.replayTimerDelay;

    if (replayTimerId === null) {
      var timerId = setInterval(function () {
        return dispatch(replayStep());
      }, replayTimerDelay * 1000);
      dispatch(setReplayTimerId(timerId));
    }
  };
};

exports.startReplay = startReplay;

var highlight = function highlight(highlightedIndex) {
  return function (dispatch, getState) {
    dispatch(pauseReplay());
    dispatch(setHighlight(highlightedIndex));
  };
};

exports.highlight = highlight;

var stepLog = function stepLog(step) {
  return function (dispatch, getState) {
    var _getState4 = getState(),
        highlightedIndex = _getState4.highlightedIndex,
        logEntries = _getState4.logEntries;

    dispatch(pauseReplay());
    var newIndex = highlightedIndex + step;
    var clippedIndex = Math.min(logEntries.length - 1, Math.max(0, newIndex));
    dispatch(setHighlight(clippedIndex));
  };
};

exports.stepLog = stepLog;

var trace = function trace(componentName, instanceId, methodName) {
  return function (dispatch, getState) {
    if (constants.shouldLogInConsole) {
      /* eslint no-console: 0 */
      console.log("".concat(util.getTimeStamp(), " ").concat(componentName, "-").concat(instanceId, ": ").concat(methodName));
    }

    setTimeout(function () {
      // Async, so we can log from render
      var _getState5 = getState(),
          logEntries = _getState5.logEntries,
          replayTimerId = _getState5.replayTimerId;

      dispatch(addLogEntry(componentName, instanceId, '' + methodName));

      if (replayTimerId === null) {
        dispatch(setHighlight(logEntries.length));
        dispatch(startReplay());
      }
    }, 0);
  };
};

exports.trace = trace;

var clearLog = function clearLog() {
  return function (dispatch, getState) {
    dispatch(pauseReplay());
    dispatch(clearLogEntries());
  };
};

exports.clearLog = clearLog;

var setReplayTimerDelay = function setReplayTimerDelay(replayTimerDelay) {
  return function (dispatch, getState) {
    sessionStorage.setItem(constants.sessionReplayTimerDelayKey, replayTimerDelay);
    dispatch(setReplayTimerDelayPrim(replayTimerDelay));
  };
};

exports.setReplayTimerDelay = setReplayTimerDelay;

var setDelay = function setDelay(replayTimerDelay) {
  return function (dispatch, getState) {
    dispatch(setReplayTimerDelay(replayTimerDelay));

    var _getState6 = getState(),
        replayTimerId = _getState6.replayTimerId;

    if (replayTimerId !== null) {
      dispatch(pauseReplay());
      var timerId = setInterval(function () {
        return dispatch(replayStep());
      }, replayTimerDelay * 1000);
      dispatch(setReplayTimerId(timerId));
    }
  };
};

exports.setDelay = setDelay;