{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = traceLifecycle;\nexports.clearInstanceIdCounters = exports.resetInstanceIdCounters = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _hoistNonReactStatics = _interopRequireDefault(require(\"hoist-non-react-statics\"));\n\nvar constants = _interopRequireWildcard(require(\"./constants\"));\n\nvar ActionCreators = _interopRequireWildcard(require(\"./redux/actionCreators\"));\n\nvar _util = require(\"./util\");\n\nvar _LifecyclePanel = _interopRequireDefault(require(\"./components/LifecyclePanel\"));\n\nvar _VisualizerProvider = require(\"./redux/VisualizerProvider\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _createSuper(Derived) {\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (_isNativeReflectConstruct()) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar instanceIdCounters = {};\n\nvar resetInstanceIdCounters = function resetInstanceIdCounters() {\n  Object.keys(instanceIdCounters).forEach(function (k) {\n    return delete instanceIdCounters[k];\n  });\n};\n\nexports.resetInstanceIdCounters = resetInstanceIdCounters;\nvar clearInstanceIdCounters = (0, _util.withDeprecationWarning)(constants.DEPRECATED_CLEAR_COUNTERS, resetInstanceIdCounters);\nexports.clearInstanceIdCounters = clearInstanceIdCounters;\n\nvar mkInstanceId = function mkInstanceId(componentName) {\n  if (!Object.prototype.hasOwnProperty.call(instanceIdCounters, componentName)) {\n    instanceIdCounters[componentName] = 0;\n  }\n\n  instanceIdCounters[componentName] += 1;\n  return instanceIdCounters[componentName];\n};\n\nfunction traceLifecycle(ComponentToTrace) {\n  var componentToTraceName = ComponentToTrace.displayName || ComponentToTrace.name || 'Component';\n  var superMethods = Object.getOwnPropertyNames(ComponentToTrace.prototype).concat(ComponentToTrace.getDerivedStateFromProps ? [constants.MGetDerivedState] : []);\n  var isLegacy = // component is legacy if it includes one of the legacy methods and no new methods.\n  superMethods.some(function (member) {\n    return constants.lifecycleMethodNamesLegacyOnly.includes(member);\n  }) && superMethods.every(function (member) {\n    return !constants.lifecycleMethodNamesNewOnly.includes(member);\n  });\n  var implementedMethods = [].concat(_toConsumableArray(superMethods), [constants.MSetState]);\n\n  var TracedComponent =\n  /*#__PURE__*/\n  function (_ComponentToTrace) {\n    _inherits(TracedComponent, _ComponentToTrace);\n\n    var _super = _createSuper(TracedComponent);\n\n    function TracedComponent(props, context) {\n      var _this;\n\n      _classCallCheck(this, TracedComponent);\n\n      props.trace(constants.MConstructor);\n      _this = _super.call(this, props, context);\n      _this.LifecyclePanel = (0, _util.withDeprecationWarning)(constants.DEPRECATED_THIS_LIFECYCLE_PANEL, props.LifecyclePanel);\n      _this.trace = (0, _util.withDeprecationWarning)(constants.DEPRECATED_THIS_TRACE, props.trace);\n\n      if (!isLegacy && typeof _this.state === 'undefined') {\n        _this.state = {}; // Initialize state if it is undefined, otherwise the addition of getDerivedStateFromProps will cause a warning.\n      }\n\n      return _this;\n    }\n\n    _createClass(TracedComponent, [{\n      key: \"componentWillMount\",\n      value: function componentWillMount() {\n        this.props.trace(constants.MWillMount);\n\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"componentWillMount\", this)) {\n          _get(_getPrototypeOf(TracedComponent.prototype), \"componentWillMount\", this).call(this);\n        }\n      }\n    }, {\n      key: \"UNSAFE_componentWillMount\",\n      value: function UNSAFE_componentWillMount() {\n        // eslint-disable-line camelcase\n        this.props.trace(constants.MWillMount); // trace it as 'componentWillMount' for brevity\n\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"UNSAFE_componentWillMount\", this)) {\n          _get(_getPrototypeOf(TracedComponent.prototype), \"UNSAFE_componentWillMount\", this).call(this);\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.props.trace(constants.MDidMount);\n\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"componentDidMount\", this)) {\n          _get(_getPrototypeOf(TracedComponent.prototype), \"componentDidMount\", this).call(this);\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.props.trace(constants.MWillUnmount);\n\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"componentWillUnmount\", this)) {\n          _get(_getPrototypeOf(TracedComponent.prototype), \"componentWillUnmount\", this).call(this);\n        }\n      }\n    }, {\n      key: \"componentWillReceiveProps\",\n      value: function componentWillReceiveProps() {\n        this.props.trace(constants.MWillReceiveProps);\n\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"componentWillReceiveProps\", this)) {\n          var _get2;\n\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          (_get2 = _get(_getPrototypeOf(TracedComponent.prototype), \"componentWillReceiveProps\", this)).call.apply(_get2, [this].concat(args));\n        }\n      }\n    }, {\n      key: \"UNSAFE_componentWillReceiveProps\",\n      value: function UNSAFE_componentWillReceiveProps() {\n        // eslint-disable-line camelcase\n        this.props.trace(constants.MWillReceiveProps); // trace it as 'componentWillReceiveProps' for brevity\n\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"UNSAFE_componentWillReceiveProps\", this)) {\n          var _get3;\n\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          (_get3 = _get(_getPrototypeOf(TracedComponent.prototype), \"UNSAFE_componentWillReceiveProps\", this)).call.apply(_get3, [this].concat(args));\n        }\n      }\n    }, {\n      key: \"shouldComponentUpdate\",\n      value: function shouldComponentUpdate() {\n        var _get4;\n\n        this.props.trace(constants.MShouldUpdate);\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return _get(_getPrototypeOf(TracedComponent.prototype), \"shouldComponentUpdate\", this) ? (_get4 = _get(_getPrototypeOf(TracedComponent.prototype), \"shouldComponentUpdate\", this)).call.apply(_get4, [this].concat(args)) : true;\n      }\n    }, {\n      key: \"componentWillUpdate\",\n      value: function componentWillUpdate() {\n        this.props.trace(constants.MWillUpdate);\n\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"componentWillUpdate\", this)) {\n          var _get5;\n\n          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n            args[_key4] = arguments[_key4];\n          }\n\n          (_get5 = _get(_getPrototypeOf(TracedComponent.prototype), \"componentWillUpdate\", this)).call.apply(_get5, [this].concat(args));\n        }\n      }\n    }, {\n      key: \"UNSAFE_componentWillUpdate\",\n      value: function UNSAFE_componentWillUpdate() {\n        // eslint-disable-line camelcase\n        this.props.trace(constants.MWillUpdate); // trace it as 'componentWillUpdate' for brevity\n\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"UNSAFE_componentWillUpdate\", this)) {\n          var _get6;\n\n          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n            args[_key5] = arguments[_key5];\n          }\n\n          (_get6 = _get(_getPrototypeOf(TracedComponent.prototype), \"UNSAFE_componentWillUpdate\", this)).call.apply(_get6, [this].concat(args));\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"render\", this)) {\n          this.props.trace(constants.MRender);\n          return _get(_getPrototypeOf(TracedComponent.prototype), \"render\", this).call(this);\n        }\n\n        return undefined; // There's no super.render, which will trigger a React error\n      }\n    }, {\n      key: \"getSnapshotBeforeUpdate\",\n      value: function getSnapshotBeforeUpdate() {\n        var _get7;\n\n        this.props.trace(constants.MGetSnapshot);\n\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n\n        return _get(_getPrototypeOf(TracedComponent.prototype), \"getSnapshotBeforeUpdate\", this) ? (_get7 = _get(_getPrototypeOf(TracedComponent.prototype), \"getSnapshotBeforeUpdate\", this)).call.apply(_get7, [this].concat(args)) : null;\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        this.props.trace(constants.MDidUpdate);\n\n        if (_get(_getPrototypeOf(TracedComponent.prototype), \"componentDidUpdate\", this)) {\n          var _get8;\n\n          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n            args[_key7] = arguments[_key7];\n          }\n\n          (_get8 = _get(_getPrototypeOf(TracedComponent.prototype), \"componentDidUpdate\", this)).call.apply(_get8, [this].concat(args));\n        }\n      }\n    }, {\n      key: \"setState\",\n      value: function setState(updater, callback) {\n        var _this2 = this;\n\n        this.props.trace(constants.MSetState); // Unlike the lifecycle methods we only trace the update function and callback when they are actually defined.\n\n        var tracingUpdater = typeof updater !== 'function' ? updater : function () {\n          _this2.props.trace(constants.MSetState + ':update fn');\n\n          return updater.apply(void 0, arguments);\n        };\n        var tracingCallback = !callback ? undefined : function () {\n          _this2.props.trace(constants.MSetState + ':callback');\n\n          callback.apply(void 0, arguments);\n        };\n\n        _get(_getPrototypeOf(TracedComponent.prototype), \"setState\", this).call(this, tracingUpdater, tracingCallback);\n      }\n    }], [{\n      key: \"getDerivedStateFromProps\",\n      value: function getDerivedStateFromProps(nextProps, prevState) {\n        nextProps.trace(constants.MGetDerivedState);\n        return ComponentToTrace.getDerivedStateFromProps ? ComponentToTrace.getDerivedStateFromProps(nextProps, prevState) : null;\n      }\n    }]);\n\n    return TracedComponent;\n  }(ComponentToTrace);\n\n  _defineProperty(TracedComponent, \"displayName\", componentToTraceName);\n\n  var TracingComponent =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(TracingComponent, _Component);\n\n    var _super2 = _createSuper(TracingComponent);\n\n    function TracingComponent(props, context) {\n      var _this3;\n\n      _classCallCheck(this, TracingComponent);\n\n      _this3 = _super2.call(this, props, context);\n      var instanceId = mkInstanceId(ComponentToTrace.name);\n\n      var WrappedLifecyclePanel = function WrappedLifecyclePanel() {\n        return (\n          /*#__PURE__*/\n          _react[\"default\"].createElement(_LifecyclePanel[\"default\"], {\n            componentName: componentToTraceName,\n            isLegacy: isLegacy,\n            instanceId: instanceId,\n            implementedMethods: implementedMethods\n          })\n        );\n      };\n\n      _this3.LifecyclePanel = WrappedLifecyclePanel;\n\n      _this3.trace = function (methodName) {\n        // Just dispatch on lifecycleVisualizerStore directly, rather than introducing complexity by using context.\n        _VisualizerProvider.store.dispatch(ActionCreators.trace(componentToTraceName, instanceId, methodName));\n      };\n\n      return _this3;\n    }\n\n    _createClass(TracingComponent, [{\n      key: \"render\",\n      value: function render() {\n        return (\n          /*#__PURE__*/\n          _react[\"default\"].createElement(TracedComponent, _extends({\n            LifecyclePanel: this.LifecyclePanel,\n            trace: this.trace\n          }, this.props))\n        );\n      }\n    }]);\n\n    return TracingComponent;\n  }(_react.Component); // Removing the inappropriate methods is simpler than adding appropriate methods to prototype.\n\n\n  _defineProperty(TracingComponent, \"displayName\", \"traceLifecycle(\".concat(componentToTraceName, \")\"));\n\n  if (isLegacy) {\n    delete TracedComponent.getDerivedStateFromProps;\n    delete TracedComponent.prototype.getSnapshotBeforeUpdate; // Only keep the tracer method corresponding to the implemented super method, unless neither the old or the\n    // UNSAFE_ method is implemented, in which case we keep the UNSAFE_ method.\n    // NOTE: This allows both the old method and the UNSAFE_ version to be traced, but this is correct, as React calls\n    //       both.\n\n    var deleteOldOrUnsafe = function deleteOldOrUnsafe(method, unsafeMethod) {\n      if (!superMethods.includes(method)) {\n        delete TracedComponent.prototype[method];\n      } else if (!superMethods.includes(unsafeMethod)) {\n        delete TracedComponent.prototype[unsafeMethod];\n      }\n    };\n\n    deleteOldOrUnsafe(constants.MWillMount, constants.MUnsafeWillMount);\n    deleteOldOrUnsafe(constants.MWillReceiveProps, constants.MUnsafeWillReceiveProps);\n    deleteOldOrUnsafe(constants.MWillUpdate, constants.MUnsafeWillUpdate);\n  } else {\n    delete TracedComponent.prototype.componentWillMount;\n    delete TracedComponent.prototype.componentWillReceiveProps;\n    delete TracedComponent.prototype.componentWillUpdate;\n    delete TracedComponent.prototype.UNSAFE_componentWillMount;\n    delete TracedComponent.prototype.UNSAFE_componentWillReceiveProps;\n    delete TracedComponent.prototype.UNSAFE_componentWillUpdate;\n  }\n\n  return (0, _hoistNonReactStatics[\"default\"])(TracingComponent, ComponentToTrace);\n}","map":null,"metadata":{},"sourceType":"script"}