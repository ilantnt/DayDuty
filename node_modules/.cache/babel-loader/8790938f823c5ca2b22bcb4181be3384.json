{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ilan\\\\dev\\\\palpi\\\\toran-app\\\\DayDuty\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { Fragment, useState, useEffect } from \"react\";\n\nfunction DataFetch(given_dates) {\n  const _useState = useState({\n    hits: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1]; //just holds the name of url query\n\n\n  const _useState3 = useState(\"http://localhost:5000/get_toranim\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        baseUrl = _useState4[0],\n        setBaseUrl = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isLoading = _useState6[0],\n        setIsLoading = _useState6[1];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      let dates = given_dates;\n      var url = new URL(baseUrl);\n      var params = {\n        dates: dates\n      };\n      url.search = new URLSearchParams(params).toString();\n      setBaseUrl(url);\n      fetch(url).then(res => res.json()).then(info => setData(info));\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, [baseUrl]);\n  return isLoading ? \"wait\" : data;\n}\n\nexport default DataFetch;","map":{"version":3,"sources":["C:/Users/ilan/dev/palpi/toran-app/DayDuty/src/Components/DataFetch.jsx"],"names":["React","Fragment","useState","useEffect","DataFetch","given_dates","hits","data","setData","baseUrl","setBaseUrl","isLoading","setIsLoading","fetchData","dates","url","URL","params","search","URLSearchParams","toString","fetch","then","res","json","info"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;;AAEA,SAASC,SAAT,CAAmBC,WAAnB,EAAgC;AAAA,oBACNH,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAE;AAAR,GAAD,CADF;AAAA;AAAA,QACvBC,IADuB;AAAA,QACjBC,OADiB,kBAE9B;;;AAF8B,qBAGAN,QAAQ,CAAC,mCAAD,CAHR;AAAA;AAAA,QAGvBO,OAHuB;AAAA,QAGdC,UAHc;;AAAA,qBAIIR,QAAQ,CAAC,KAAD,CAJZ;AAAA;AAAA,QAIvBS,SAJuB;AAAA,QAIZC,YAJY;;AAM9BT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,SAAS,GAAG,YAAY;AAC5BD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAIE,KAAK,GAAGT,WAAZ;AACA,UAAIU,GAAG,GAAG,IAAIC,GAAJ,CAAQP,OAAR,CAAV;AACA,UAAIQ,MAAM,GAAG;AAAEH,QAAAA,KAAK,EAAEA;AAAT,OAAb;AACAC,MAAAA,GAAG,CAACG,MAAJ,GAAa,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,QAA5B,EAAb;AACAV,MAAAA,UAAU,CAACK,GAAD,CAAV;AACAM,MAAAA,KAAK,CAACN,GAAD,CAAL,CACGO,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIjB,OAAO,CAACiB,IAAD,CAFvB;AAGAb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAXD;;AAYAC,IAAAA,SAAS;AACV,GAdQ,EAcN,CAACJ,OAAD,CAdM,CAAT;AAgBA,SAAOE,SAAS,GAAG,MAAH,GAAYJ,IAA5B;AACD;;AACD,eAAeH,SAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\n\r\nfunction DataFetch(given_dates) {\r\n  const [data, setData] = useState({ hits: [] });\r\n  //just holds the name of url query\r\n  const [baseUrl, setBaseUrl] = useState(\"http://localhost:5000/get_toranim\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      let dates = given_dates;\r\n      var url = new URL(baseUrl);\r\n      var params = { dates: dates };\r\n      url.search = new URLSearchParams(params).toString();\r\n      setBaseUrl(url);\r\n      fetch(url)\r\n        .then(res => res.json())\r\n        .then(info => setData(info));\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [baseUrl]);\r\n\r\n  return isLoading ? \"wait\" : data;\r\n}\r\nexport default DataFetch;\r\n"]},"metadata":{},"sourceType":"module"}