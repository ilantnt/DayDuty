{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setDelay = exports.setReplayTimerDelay = exports.clearLog = exports.trace = exports.stepLog = exports.highlight = exports.startReplay = exports.pauseReplay = void 0;\n\nvar constants = _interopRequireWildcard(require(\"../constants\"));\n\nvar util = _interopRequireWildcard(require(\"../util\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n/* global sessionStorage:false */\n\n/* eslint no-unused-vars: [1, { \"args\": \"none\" }] */\n// Primitive actions:\n\n\nvar addLogEntry = function addLogEntry(componentName, instanceId, methodName) {\n  return {\n    type: 'ADD_LOG_ENTRY',\n    componentName: componentName,\n    instanceId: instanceId,\n    methodName: methodName\n  };\n};\n\nvar clearLogEntries = function clearLogEntries() {\n  return {\n    type: 'CLEAR_LOG_ENTRIES'\n  };\n};\n\nvar setHighlight = function setHighlight(highlightedIndex) {\n  return {\n    type: 'SET_HIGHLIGHT',\n    highlightedIndex: highlightedIndex\n  };\n};\n\nvar setReplayTimerId = function setReplayTimerId(replayTimerId) {\n  return {\n    type: 'SET_REPLAY_TIMER_ID',\n    replayTimerId: replayTimerId\n  };\n};\n\nvar setReplayTimerDelayPrim = function setReplayTimerDelayPrim(replayTimerDelay) {\n  return {\n    type: 'SET_REPLAY_TIMER_DELAY',\n    replayTimerDelay: replayTimerDelay\n  };\n}; // Thunk actions:\n\n\nvar pauseReplay = function pauseReplay() {\n  return function (dispatch, getState) {\n    var _getState = getState(),\n        replayTimerId = _getState.replayTimerId;\n\n    if (replayTimerId !== null) {\n      clearInterval(replayTimerId);\n      dispatch(setReplayTimerId(null));\n    }\n  };\n};\n\nexports.pauseReplay = pauseReplay;\n\nvar replayStep = function replayStep() {\n  return function (dispatch, getState) {\n    var _getState2 = getState(),\n        highlightedIndex = _getState2.highlightedIndex,\n        logEntries = _getState2.logEntries;\n\n    if (highlightedIndex < logEntries.length - 1) {\n      dispatch(setHighlight(highlightedIndex + 1));\n    } else {\n      dispatch(pauseReplay());\n    }\n  };\n};\n\nvar startReplay = function startReplay() {\n  return function (dispatch, getState) {\n    var _getState3 = getState(),\n        replayTimerId = _getState3.replayTimerId,\n        replayTimerDelay = _getState3.replayTimerDelay;\n\n    if (replayTimerId === null) {\n      var timerId = setInterval(function () {\n        return dispatch(replayStep());\n      }, replayTimerDelay * 1000);\n      dispatch(setReplayTimerId(timerId));\n    }\n  };\n};\n\nexports.startReplay = startReplay;\n\nvar highlight = function highlight(highlightedIndex) {\n  return function (dispatch, getState) {\n    dispatch(pauseReplay());\n    dispatch(setHighlight(highlightedIndex));\n  };\n};\n\nexports.highlight = highlight;\n\nvar stepLog = function stepLog(step) {\n  return function (dispatch, getState) {\n    var _getState4 = getState(),\n        highlightedIndex = _getState4.highlightedIndex,\n        logEntries = _getState4.logEntries;\n\n    dispatch(pauseReplay());\n    var newIndex = highlightedIndex + step;\n    var clippedIndex = Math.min(logEntries.length - 1, Math.max(0, newIndex));\n    dispatch(setHighlight(clippedIndex));\n  };\n};\n\nexports.stepLog = stepLog;\n\nvar trace = function trace(componentName, instanceId, methodName) {\n  return function (dispatch, getState) {\n    if (constants.shouldLogInConsole) {\n      /* eslint no-console: 0 */\n      console.log(\"\".concat(util.getTimeStamp(), \" \").concat(componentName, \"-\").concat(instanceId, \": \").concat(methodName));\n    }\n\n    setTimeout(function () {\n      // Async, so we can log from render\n      var _getState5 = getState(),\n          logEntries = _getState5.logEntries,\n          replayTimerId = _getState5.replayTimerId;\n\n      dispatch(addLogEntry(componentName, instanceId, '' + methodName));\n\n      if (replayTimerId === null) {\n        dispatch(setHighlight(logEntries.length));\n        dispatch(startReplay());\n      }\n    }, 0);\n  };\n};\n\nexports.trace = trace;\n\nvar clearLog = function clearLog() {\n  return function (dispatch, getState) {\n    dispatch(pauseReplay());\n    dispatch(clearLogEntries());\n  };\n};\n\nexports.clearLog = clearLog;\n\nvar setReplayTimerDelay = function setReplayTimerDelay(replayTimerDelay) {\n  return function (dispatch, getState) {\n    sessionStorage.setItem(constants.sessionReplayTimerDelayKey, replayTimerDelay);\n    dispatch(setReplayTimerDelayPrim(replayTimerDelay));\n  };\n};\n\nexports.setReplayTimerDelay = setReplayTimerDelay;\n\nvar setDelay = function setDelay(replayTimerDelay) {\n  return function (dispatch, getState) {\n    dispatch(setReplayTimerDelay(replayTimerDelay));\n\n    var _getState6 = getState(),\n        replayTimerId = _getState6.replayTimerId;\n\n    if (replayTimerId !== null) {\n      dispatch(pauseReplay());\n      var timerId = setInterval(function () {\n        return dispatch(replayStep());\n      }, replayTimerDelay * 1000);\n      dispatch(setReplayTimerId(timerId));\n    }\n  };\n};\n\nexports.setDelay = setDelay;","map":null,"metadata":{},"sourceType":"script"}