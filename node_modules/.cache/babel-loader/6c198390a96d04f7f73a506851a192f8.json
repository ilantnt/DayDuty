{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\ilan\\\\dev\\\\palpi\\\\toran-app\\\\DayDuty\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\ilan\\\\dev\\\\palpi\\\\toran-app\\\\DayDuty\\\\src\\\\Components\\\\DataFetch.jsx\";\nimport React, { Fragment, useState, useEffect } from \"react\";\n\nfunction DataFetch(given_dates) {\n  const _useState = useState({\n    hits: []\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState(\"http://localhost:5000/get_toranim\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        baseUrl = _useState4[0],\n        setBaseUrl = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isLoading = _useState6[0],\n        setIsLoading = _useState6[1];\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      let dates = given_dates;\n      var url = new URL(baseUrl);\n      var params = {\n        dates: dates\n      };\n      url.search = new URLSearchParams(params).toString();\n      setBaseUrl(url);\n      fetch(url).then(res => res.json()).then(info => setData(info));\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, [url]);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    value: query,\n    onChange: event => setQuery(event.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => setUrl(\"http://hn.algolia.com/api/v1/search?query=\".concat(query)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Search\"), isLoading ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"Loading ...\") : React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, data.hits.map(item => React.createElement(\"li\", {\n    key: item.objectID,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: item.url,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, item.title)))));\n}\n\nexport default DataFetch;","map":{"version":3,"sources":["C:/Users/ilan/dev/palpi/toran-app/DayDuty/src/Components/DataFetch.jsx"],"names":["React","Fragment","useState","useEffect","DataFetch","given_dates","hits","data","setData","baseUrl","setBaseUrl","isLoading","setIsLoading","fetchData","dates","url","URL","params","search","URLSearchParams","toString","fetch","then","res","json","info","query","event","setQuery","target","value","setUrl","map","item","objectID","title"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;;AAEA,SAASC,SAAT,CAAmBC,WAAnB,EAAgC;AAAA,oBACNH,QAAQ,CAAC;AAAEI,IAAAA,IAAI,EAAE;AAAR,GAAD,CADF;AAAA;AAAA,QACvBC,IADuB;AAAA,QACjBC,OADiB;;AAAA,qBAEAN,QAAQ,CAAC,mCAAD,CAFR;AAAA;AAAA,QAEvBO,OAFuB;AAAA,QAEdC,UAFc;;AAAA,qBAGIR,QAAQ,CAAC,KAAD,CAHZ;AAAA;AAAA,QAGvBS,SAHuB;AAAA,QAGZC,YAHY;;AAK9BT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,SAAS,GAAG,YAAY;AAC5BD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAIE,KAAK,GAAGT,WAAZ;AACA,UAAIU,GAAG,GAAG,IAAIC,GAAJ,CAAQP,OAAR,CAAV;AACA,UAAIQ,MAAM,GAAG;AAAEH,QAAAA,KAAK,EAAEA;AAAT,OAAb;AACAC,MAAAA,GAAG,CAACG,MAAJ,GAAa,IAAIC,eAAJ,CAAoBF,MAApB,EAA4BG,QAA5B,EAAb;AACAV,MAAAA,UAAU,CAACK,GAAD,CAAV;AACAM,MAAAA,KAAK,CAACN,GAAD,CAAL,CACGO,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQG,IAAI,IAAIjB,OAAO,CAACiB,IAAD,CAFvB;AAGAb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAXD;;AAYAC,IAAAA,SAAS;AACV,GAdQ,EAcN,CAACE,GAAD,CAdM,CAAT;AAgBA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAEW,KAFT;AAGE,IAAA,QAAQ,EAAEC,KAAK,IAAIC,QAAQ,CAACD,KAAK,CAACE,MAAN,CAAaC,KAAd,CAH7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAE,MACPC,MAAM,qDAA8CL,KAA9C,EAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,EAcGf,SAAS,GACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADQ,GAGR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,IAAI,CAACD,IAAL,CAAU0B,GAAV,CAAcC,IAAI,IACjB;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,IAAI,EAAED,IAAI,CAAClB,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBkB,IAAI,CAACE,KAAzB,CADF,CADD,CADH,CAjBJ,CADF;AA4BD;;AACD,eAAe/B,SAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\n\r\nfunction DataFetch(given_dates) {\r\n  const [data, setData] = useState({ hits: [] });\r\n  const [baseUrl, setBaseUrl] = useState(\"http://localhost:5000/get_toranim\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      let dates = given_dates;\r\n      var url = new URL(baseUrl);\r\n      var params = { dates: dates };\r\n      url.search = new URLSearchParams(params).toString();\r\n      setBaseUrl(url);\r\n      fetch(url)\r\n        .then(res => res.json())\r\n        .then(info => setData(info));\r\n      setIsLoading(false);\r\n    };\r\n    fetchData();\r\n  }, [url]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <input\r\n        type=\"text\"\r\n        value={query}\r\n        onChange={event => setQuery(event.target.value)}\r\n      />\r\n      <button\r\n        type=\"button\"\r\n        onClick={() =>\r\n          setUrl(`http://hn.algolia.com/api/v1/search?query=${query}`)\r\n        }\r\n      >\r\n        Search\r\n      </button>\r\n      {isLoading ? (\r\n        <div>Loading ...</div>\r\n      ) : (\r\n        <ul>\r\n          {data.hits.map(item => (\r\n            <li key={item.objectID}>\r\n              <a href={item.url}>{item.title}</a>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\nexport default DataFetch;\r\n"]},"metadata":{},"sourceType":"module"}